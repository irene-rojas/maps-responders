{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["hospitals","name","address","city","state","zip","lng","lat","lngLat","id","App","getLocation","navigator","geolocation","getCurrentPosition","position","_this","setState","coords","longitude","latitude","console","log","getMap","mapboxgl","accessToken","map","Map","container","style","center","zoom","Popup","closeButton","offset","className","anchor","setLngLat","setText","addTo","Marker","directions","MapboxDirections","unit","profile","alternatives","congestion","flyTo","steps","controls","profileSwitcher","inputs","addControl","on","setOrigin","this","react_default","a","createElement","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c95ac00.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxDirections from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions';\n\nconst hospitals = [\n    {\n        name: \"Inova Franconia-Springfield\",\n        address: \"6355 Walker Ln\",\n        city: \"Alexandria\",\n        state: \"VA\",\n        zip: 22310,\n        lng: -77.160734,\n        lat: 38.767261,\n        lngLat: [-77.160734,38.767261],\n        id: 1\n    },\n    {\n        name: \"Inova Alexandria\",\n        address: \"4320 Seminary Rd\",\n        city: \"Alexandria\",\n        state: \"VA\",\n        zip: 22304,\n        lng: -77.104506,\n        lat: 38.822312,\n        lngLat: [-77.104506,38.822312],\n        id: 2\n    },\n    {\n        name: \"Inova Mount Vernon\",\n        address: \"2501 Parkers Ln\",\n        city: \"Alexandria\",\n        state: \"VA\",\n        zip: 22306,\n        lng: -77.076892,\n        lat: 38.739944,\n        lngLat: [-77.076892,38.739944],\n        id: 3\n    },\n    {\n        name: \"Inova Fairfax City\",\n        address: \"4315 Chain Bridge Rd\",\n        city: \"Fairfax\",\n        state: \"VA\",\n        zip: 22030,\n        lng: -77.310210,\n        lat: 38.838109,\n        lngLat: [-77.310210,38.838109],\n        id: 4\n    },\n    {\n        name: \"Inova Fairfax Hospital\",\n        address: \"3300 Gallows Rd\",\n        city: \"Falls Church\",\n        state: \"VA\",\n        zip: 22042,\n        lng: -77.226965,\n        lat: 38.857931,\n        lngLat: [-77.226965,38.857931],\n        id: 5\n    },\n    {\n        name: \"Inova Lorton\",\n        address: \"9321 Sanger St,\",\n        city: \"Lorton\",\n        state: \"VA\",\n        zip: 22079,\n        lng: -77.226904,\n        lat: 38.702781,\n        lngLat: [-77.226904,38.702781],\n        id: 6\n    },\n    {\n        name: \"Virginia Hospital Center\",\n        address: \"1701 N George Mason Dr\",\n        city: \"Arlington\",\n        state: \"VA\",\n        zip: 22205,\n        lng: -77.126455,\n        lat: 38.888974,\n        lngLat: [-77.126455,38.888974],\n        id: 7\n    },\n    {\n        name: \"George Washington University Hospital\",\n        address: \"900 23rd St NW\",\n        city: \"Washington\",\n        state: \"DC\",\n        zip: 20037,\n        lng: -77.050458,\n        lat: 38.901589,\n        lngLat: [-77.050458,38.901589],\n        id: 8\n    },\n    {\n        name: \"Fort Washington Hospital\",\n        address: \"11711 Livingston Rd\",\n        city: \"Fort Washington\",\n        state: \"MD\",\n        zip: 20744,\n        lng: -76.992611,\n        lat: 38.728376,\n        lngLat: [-76.992611,38.728376],\n        id: 9\n    },\n    {\n        name: \"MedStar Washington Hospital Center\",\n        address: \"110 Irving St NW\",\n        city: \"Washington\",\n        state: \"DC\",\n        zip: 20010,\n        lng: -77.016315,\n        lat: 38.929632,\n        lngLat: [-77.016315,38.929632],\n        id: 10\n    },\n    {\n        name: \"MedStar Georgetown University Hospital\",\n        address: \"3800 Reservoir Rd NW\",\n        city: \"Washington\",\n        state: \"DC\",\n        zip: 20007,\n        lng: -77.076138,\n        lat: 38.911695,\n        lngLat: [-77.076138,38.911695],\n        id: 11\n    },\n    {\n        name: \"Howard University Hospital\",\n        address: \"2041 Georgia Ave NW\",\n        city: \"Washington\",\n        state: \"DC\",\n        zip: 20060,\n        lng: -77.020867,\n        lat: 38.917846,\n        lngLat: [-77.020867,38.917846],\n        id: 12\n    },\n    {\n        name: \"Sibley Memorial Hospital\",\n        address: \"5255 Loughboro Rd NW\",\n        city: \"Washington\",\n        state: \"DC\",\n        zip: 20016,\n        lng: -77.108654,\n        lat: 38.937045,\n        lngLat: [-77.108654,38.937045],\n        id: 13\n    },\n    {\n        name: \"Fort Belvoir Community Hospital \",\n        address: \"9300 DeWitt Loop\",\n        city: \"Fort Belvoir\",\n        state: \"VA\",\n        zip: 22060,\n        lng: -77.144043,\n        lat: 38.706118,\n        lngLat: [-77.144043,38.706118],\n        id: 14\n    }\n];\n\n\nclass App extends Component {\n\n    state = {\n        lng: \"\",\n        lat: \"\", \n        lngLat: []\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    getLocation = () => {\n        navigator.geolocation.getCurrentPosition((position) => { \n            this.setState({\n                lng: position.coords.longitude,\n                lat: position.coords.latitude,\n                lngLat: [position.coords.longitude,position.coords.latitude]\n            }, () => {\n                console.log(this.state.lat, this.state.lng);\n                this.getMap();\n            }); \n        });\n    }\n    \n    // MAPBOX - LNG, LAT!!\n    getMap = () => {\n        mapboxgl.accessToken = \"pk.eyJ1IjoiaXJlbmVyb2phcyIsImEiOiJjanY1cWxnMWowMXBmNDVzMmFubG54bG9xIn0.bUcUYG7qMcxDc_QEqVj8Ww\";\n        let map = new mapboxgl.Map({\n            container: 'map',\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [this.state.lng,this.state.lat],\n            zoom: 12\n        });\n\n        // CURRENT LOCATION\n        new mapboxgl.Popup({closeButton: false, offset: 10, className: 'currentPopup', anchor: 'left'})\n            .setLngLat([this.state.lng,this.state.lat])\n            .setText(\"You are here\")\n            .addTo(map);\n\n        // HOSPITALS\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[0].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[0].lngLat)\n            .setText(hospitals[0].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[1].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[1].lngLat)\n            .setText(hospitals[1].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[2].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[2].lngLat)\n            .setText(hospitals[2].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[3].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[3].lngLat)\n            .setText(hospitals[3].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[4].lngLat)\n            .addTo(map);\n            new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[4].lngLat)\n            .setText(hospitals[4].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[5].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[5].lngLat)\n            .setText(hospitals[5].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[6].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[6].lngLat)\n            .setText(hospitals[6].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[7].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[7].lngLat)\n            .setText(hospitals[7].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[8].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[8].lngLat)\n            .setText(hospitals[8].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[9].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[9].lngLat)\n            .setText(hospitals[9].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[10].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[10].lngLat)\n            .setText(hospitals[10].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[11].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[11].lngLat)\n            .setText(hospitals[11].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[12].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[12].lngLat)\n            .setText(hospitals[12].name)\n            .addTo(map);\n\n        new mapboxgl.Marker()\n            .setLngLat(hospitals[13].lngLat)\n            .addTo(map);\n        new mapboxgl.Popup({className: 'hospitalPopup'})\n            .setLngLat(hospitals[13].lngLat)\n            .setText(hospitals[13].name)\n            .addTo(map);\n\n        // DIRECTIONS\n        let directions = new MapboxDirections({\n            accessToken: \"pk.eyJ1IjoiaXJlbmVyb2phcyIsImEiOiJjanY1cWxnMWowMXBmNDVzMmFubG54bG9xIn0.bUcUYG7qMcxDc_QEqVj8Ww\",\n            unit: 'imperial',\n            profile: 'mapbox/driving-traffic',\n            alternatives: true,\n            congestion: true,\n            flyTo: false,\n            steps: true,\n            controls: {\n                profileSwitcher: false,\n                inputs: false,\n            }\n            });\n            map.addControl(directions, 'top-left');   \n\n            map.on('load', () => {\n                directions.setOrigin([this.state.lng,this.state.lat]);\n            });\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <div className=\"title\">\n                    <h3>Emergency room locator</h3>\n                    <h5>Washington, DC Area</h5>\n                </div>\n\n                <div className=\"instructions\">\n                    Navigation start defaults to your position\n                    <br/>\n                    Click hospital marker base for directions\n                    <br/>\n                    Powered by <a href=\"https://www.mapbox.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Mapbox</a>\n                </div>\n\n                <div id=\"map\"></div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}